(window.webpackJsonp=window.webpackJsonp||[]).push([[7],{"3waB":function(t,n,e){"use strict";e.r(n);var o=e("CcnG"),r=e("Ip0R"),i=e("ZYCi"),c=function(t,n,e,o){var r,i=arguments.length,c=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,e):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(t,n,e,o);else for(var a=t.length-1;a>=0;a--)(r=t[a])&&(c=(i<3?r(c):i>3?r(n,e,c):r(n,e))||c);return i>3&&c&&Object.defineProperty(n,e,c),c},a=function(t,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,n)},l=function(){function t(){}return t.prototype.ngOnInit=function(){},t=c([Object(o.n)({selector:"app-hint",template:e("O4bU"),styles:[e("fLDI")]}),a("design:paramtypes",[])],t)}(),s=e("UTH0"),p=function(t,n,e,o){var r,i=arguments.length,c=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,e):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(t,n,e,o);else for(var a=t.length-1;a>=0;a--)(r=t[a])&&(c=(i<3?r(c):i>3?r(n,e,c):r(n,e))||c);return i>3&&c&&Object.defineProperty(n,e,c),c},d=function(t,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,n)},u=function(){function t(t){this.toastService=t}return t.prototype.toast=function(){this.toastService.create("This is a toast")},t.prototype.toastWait=function(){this.toastService.create("This is a toast").subscribe(function(){return alert("closed")})},t.prototype.toastCustom=function(){this.toastService.create("This is a toast",{additional:{distance:0,showTop:!0},cls:"alert",timeout:2e4})},t.ctorParameters=function(){return[{type:s.l}]},t=p([Object(o.n)({selector:"app-toast",template:e("GKej"),styles:[e("pnAw")]}),d("design:paramtypes",[s.l])],t)}(),f=function(t,n,e,o){var r,i=arguments.length,c=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,e):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(t,n,e,o);else for(var a=t.length-1;a>=0;a--)(r=t[a])&&(c=(i<3?r(c):i>3?r(n,e,c):r(n,e))||c);return i>3&&c&&Object.defineProperty(n,e,c),c},m=function(t,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,n)},g=function(){function t(t){this.notifyService=t,this.message="",this.title=""}return t.prototype.ngOnInit=function(){},t.prototype.notify=function(){this.notifyService.create("Notify message"),this.notifyService.create("Notify message","Notify title")},t.prototype.notifyWait=function(){this.notifyService.create("Notify message","Notify title",{keepOpen:!0}).subscribe(function(){return alert("closed")})},t.prototype.notifyOpen=function(){this.notifyService.create("Notify message","Notify title",{keepOpen:!0})},t.prototype.notifyCustom=function(){this.notifyService.create("Notify message","Notify title",{keepOpen:!0,cls:"success",width:"400px"})},t.prototype.notifySetup=function(){this.notifyService.setup({duration:2e3,animation:"easeInBounce",distance:"50px",timeout:700,width:"400px"}),this.notifyService.create("Notify message","Notify title"),this.notifyService.reset()},t.ctorParameters=function(){return[{type:s.k}]},t=f([Object(o.n)({selector:"app-notify",template:e("T5++"),styles:[e("6Ui9")]}),m("design:paramtypes",[s.k])],t)}(),v=function(t,n,e,o){var r,i=arguments.length,c=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,e):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(t,n,e,o);else for(var a=t.length-1;a>=0;a--)(r=t[a])&&(c=(i<3?r(c):i>3?r(n,e,c):r(n,e))||c);return i>3&&c&&Object.defineProperty(n,e,c),c},h=function(t,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,n)},y=function(){function t(t){this.dialogService=t,this.dialogOpen=!1,this.overlay=!0,this.primary=!0,this.width=900}return t.prototype.ngOnInit=function(){},t.prototype.showDialog=function(){var t=this;this.dialog.open().subscribe(console.log),setTimeout(function(){t.dialog.close()},5e3)},t.ctorParameters=function(){return[{type:s.c}]},v([Object(o.lb)("dialog",{static:!0}),h("design:type",s.b)],t.prototype,"dialog",void 0),t=v([Object(o.n)({selector:"app-dialog",template:e("BIoZ"),styles:[e("qq+C")]}),h("design:paramtypes",[s.c])],t)}(),b=e("mrSG"),S=e("MGBS"),A=e("zotm");var C=function(){function t(t){this.notifier=t}return t.prototype.call=function(t,n){var e=new T(t),o=Object(A.a)(e,this.notifier);return o&&!e.seenValue?(e.add(o),n.subscribe(e)):e},t}(),T=function(t){function n(n){var e=t.call(this,n)||this;return e.seenValue=!1,e}return b.c(n,t),n.prototype.notifyNext=function(t,n,e,o,r){this.seenValue=!0,this.complete()},n.prototype.notifyComplete=function(){},n}(S.a),O=e("gI3B"),D=e("gIcY"),k=function(t,n,e,o){var r,i=arguments.length,c=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,e):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(t,n,e,o);else for(var a=t.length-1;a>=0;a--)(r=t[a])&&(c=(i<3?r(c):i>3?r(n,e,c):r(n,e))||c);return i>3&&c&&Object.defineProperty(n,e,c),c},w=function(t,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,n)},j=function(){function t(t){this.dialogService=t}return t.prototype.alert=function(){this.dialogService.alert("Basic alert","Warning!")},t.prototype.confirm=function(){this.dialogService.confirm("Basic confirm","Are you sure?")},t.prototype.prompt=function(){this.dialogService.prompt("Basic prompt","Enter value")},t.prototype.info=function(){this.dialogService.info("Basic info")},t.prototype.ngOnInit=function(){},t.prototype.confirmWait=function(){this.dialogService.confirm("Confirm wait","Are you sure?").subscribe(function(t){return alert(t)})},t.prototype.promptWait=function(){this.dialogService.prompt("Prompt wait","Input").subscribe(function(t){return alert(t)})},t.prototype.promptForm=function(){var t=new s.i("prompt",{name:new s.h(s.e,null,[D.g.required],null,{read:"text"})},null,null);this.dialogService.formPrompt("Form prompt",t).subscribe(function(t){return alert(JSON.stringify(t))})},t.prototype.alertClose=function(){var t;this.dialogService.alert("Alert close","Content").pipe((t=Object(O.a)(2e3),function(n){return n.lift(new C(t))})).subscribe()},t.ctorParameters=function(){return[{type:s.c}]},t=k([Object(o.n)({selector:"app-dialog-service",template:e("ex+n"),styles:[e("aq7P")]}),w("design:paramtypes",[s.c])],t)}(),R=function(t,n,e,o){var r,i=arguments.length,c=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,e):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(t,n,e,o);else for(var a=t.length-1;a>=0;a--)(r=t[a])&&(c=(i<3?r(c):i>3?r(n,e,c):r(n,e))||c);return i>3&&c&&Object.defineProperty(n,e,c),c},N=[{path:"hint",component:l},{path:"toast",component:u},{path:"notify",component:g},{path:"dialog",component:y},{path:"dialog-service",component:j}],x=function(){function t(){}return t=R([Object(o.J)({imports:[i.f.forChild(N)],exports:[i.f]})],t)}(),P=e("PCNd");e.d(n,"InformationModule",function(){return I});var B=function(t,n,e,o){var r,i=arguments.length,c=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,e):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)c=Reflect.decorate(t,n,e,o);else for(var a=t.length-1;a>=0;a--)(r=t[a])&&(c=(i<3?r(c):i>3?r(n,e,c):r(n,e))||c);return i>3&&c&&Object.defineProperty(n,e,c),c},I=function(){function t(){}return t=B([Object(o.J)({declarations:[l,u,g,y,j],imports:[r.b,P.a,x]})],t)}()},"6Ui9":function(t,n){t.exports=""},BIoZ:function(t,n){t.exports='<h1>Dialog</h1>\r\n<a href="https://metroui.org.ua/dialog.html" target="_blank">Dialog in Metro 4 docs</a>\r\n\r\n<app-doc-component header="Basic usage">\r\n  <![CDATA[\r\n  <m4-dialog #dialog>\\l\r\n    \\t<div dialog-title>dialog title</div>\\l\r\n    \\t<div dialog-content>dialog content</div>\\l\r\n  </m4-dialog>\\n\r\n  <button m4-button (click)="dialog.open()">Open</button>\r\n  ]]>\r\n</app-doc-component>\r\n\r\n<div class="remark primary">\r\n  The dialog element has three content sections:<br>\r\n  <ol>\r\n    <li>\r\n      <b>Title:</b><br>\r\n      <code>&lt;div dialog-title&gt;&lt;/div&gt;</code><br>\r\n      Contains the title of the dialog\r\n    </li>\r\n    <li>\r\n      <b>Content:</b><br>\r\n      <code>&lt;div dialog-content&gt;&lt;/div&gt;</code><br>\r\n      Contains the content of the dialog\r\n    </li>\r\n    <li>\r\n      <b>Actions:</b><br>\r\n      <code>&lt;div dialog-actions&gt;&lt;/div&gt;</code><br>\r\n      Contains custom actions of the dialog. (If not given the dialog has a default Ok-button in this section)\r\n    </li>\r\n  </ol>\r\n</div>\r\n\r\n<app-doc-component header="Control open-state">\r\n  <![CDATA[\r\n  <m4-dialog [open]="isOpen" (close-event)="isOpen = false">\\l\r\n    \\t<div dialog-title>dialog title</div>\\l\r\n    \\t<div dialog-content>dialog content</div>\\l\r\n    \\t<div dialog-actions>no actions</div>\\l\r\n  </m4-dialog>\\n\r\n  <m4-checkbox caption="Dialog open" [(ngModel)]="isOpen"></m4-checkbox>\r\n  ]]>\r\n</app-doc-component>\r\n\r\n\r\n<app-doc-component header="Width">\r\n  <![CDATA[\r\n  <m4-dialog #dialog width="50%">\\l\r\n    \\t<div dialog-title>dialog title</div>\\l\r\n    \\t<div dialog-content>dialog content</div>\\l\r\n  </m4-dialog>\\n\r\n  <button m4-button (click)="dialog.open()">Open (static width)</button>\\n\\n\r\n  <m4-dialog #dialog2 class="w-75 w-25-md">\\l\r\n    \\t<div dialog-title>dialog title</div>\\l\r\n    \\t<div dialog-content>dialog content</div>\\l\r\n  </m4-dialog>\\n\r\n  <button m4-button (click)="dialog2.open()">Open (set with css)</button>\r\n  ]]>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Style">\r\n  <![CDATA[\r\n  <m4-dialog #dialog [class]="style">\\l\r\n    \\t<div dialog-title>dialog title</div>\\l\r\n    \\t<div dialog-content>dialog content</div>\\l\r\n  </m4-dialog>\\n\r\n  <button m4-button (click)="dialog.open()">Open</button>\\n\r\n\r\n  \\i\r\n  <m4-select class="mt-5" [(ngModel)]="style" [options]="accentDictionary" prepend="Style"></m4-select>\\n\r\n  ]]>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Overlay">\r\n  <![CDATA[\r\n  <m4-dialog #dialog [overlay]="true" overlay-color="#ff0000" [overlay-alpha]="0.1">\\l\r\n    \\t<div dialog-title>dialog title</div>\\l\r\n    \\t<div dialog-content>dialog content</div>\\l\r\n  </m4-dialog>\\n\r\n  <button m4-button (click)="dialog.open()">Open</button>\r\n  ]]>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Access from code">\r\n  <![CDATA[\r\n  <m4-dialog #dialog>\\l\r\n    \\t<div dialog-title>dialog title</div>\\l\r\n    \\t<div dialog-content>dialog content</div>\\l\r\n  </m4-dialog>\\n\r\n  <button m4-button (click)="dialog.open()">Open</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    @ViewChild(\'dialog\', { static: true }) dialog: metro4.DialogComponent;\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n'},GKej:function(t,n){t.exports='<h1>Toast service</h1>\r\n<a href="https://metroui.org.ua/toast.html" target="_blank">Toast in Metro 4 docs</a>\r\n\r\n<div class="remark info">\r\n  The <code>ToastService</code> provides methods to simply create toast-notifications in your application.\r\n</div>\r\n\r\n<app-doc-component header="Basic usage" [values]="{ toastService: toastService, toast: toast }">\r\n  <![CDATA[\r\n  <button m4-button (click)="toast()">Create toast</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    @Component({\\n\r\n      \\tselector: \'app-toast\',\\n\r\n      \\ttemplateUrl: \'./toast.component.html\',\\n\r\n      \\tstyleUrls: [\'./toast.component.less\']\\n\r\n    })\\n\r\n    export class ToastComponent {\\n\r\n      \\tconstructor(private toastService: ToastService) { }\\n\\n\r\n\r\n      \\ttoast() {\\n\r\n        \\t\\tthis.toastService.create(\'This is a toast\');\\n\r\n      \\t}\\n\r\n    }\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Wait for result" description="The create method returns an observables that you can use to wait for the toast to be closed/clicked"\r\n                   [values]="{ toastService: toastService, toast: toastWait }">\r\n  <![CDATA[\r\n  <button m4-button (click)="toast()">Create toast</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.toastService.create(\'This is a toast\').subscribe(() => alert(\'closed\'));\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Customize"\r\n                   [values]="{ toastService: toastService, toast: toastCustom }">\r\n  <![CDATA[\r\n  <button m4-button (click)="toast()">Create toast</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.toastService.create(\'This is a toast\', { additional: { distance: 0, showTop: true }, cls: \'alert\', timeout: 1000 });\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n'},O4bU:function(t,n){t.exports='<h1>Hint</h1>\r\n<a href="https://metroui.org.ua/hints.html" target="_blank">Hint in Metro 4 docs</a>\r\n\r\n<app-doc-component header="Basic usage">\r\n  <![CDATA[\r\n  <button m4-button m4-hint="Hint content">Button with hint</button>\r\n  ]]>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Position">\r\n  <![CDATA[\r\n  <button m4-button m4-hint="Left" hint-position="left">Hint left</button>\\n\r\n  <button m4-button m4-hint="Top" hint-position="top">Hint top</button>\\n\r\n  <button m4-button m4-hint="Bottom" hint-position="bottom">Hint bottom</button>\\n\r\n  <button m4-button m4-hint="Right" hint-position="right">Hint right</button>\r\n  ]]>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Customize">\r\n  <![CDATA[\r\n  <button m4-button m4-hint="Content" hint-offset="0">Custom offset</button>\\n\r\n  <button m4-button m4-hint="Content" hint-hide="1000">Hide after timeout</button>\r\n  ]]>\r\n</app-doc-component>\r\n'},"T5++":function(t,n){t.exports='<h1>Notify service</h1>\r\n<a href="https://metroui.org.ua/notify.html" target="_blank">Notify in Metro 4 docs</a>\r\n\r\n<div class="remark info">\r\n  The <code>NotifyService</code> provides methods to simply create notifications in your application.\r\n</div>\r\n\r\n<app-doc-component header="Basic usage" [values]="{ notifyService: notifyService, notify: notify }">\r\n  <![CDATA[\r\n  <button m4-button (click)="notify()">Notify</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    @Component({\\n\r\n      \\tselector: \'app-notify\',\\n\r\n      \\ttemplateUrl: \'./notify.component.html\',\\n\r\n      \\tstyleUrls: [\'./notify.component.less\']\\n\r\n    })\\n\r\n    export class NotifyComponent {\\n\\n\r\n\r\n      \\tconstructor(public notifyService: NotifyService) { }\\n\\n\r\n\r\n      \\tnotify() {\\n\r\n        \\t\\tthis.notifyService.create(\'Notify message\');\\n\r\n        \\t\\tthis.notifyService.create(\'Notify message\', \'Notify title\');\\n\r\n      \\t}\\n\r\n    }\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Wait for result" description="The create method returns an observables that you can use to wait for the notification to be closed/clicked"\r\n                   [values]="{ notifyService: notifyService, notify: notifyWait }">\r\n  <![CDATA[\r\n  <button m4-button (click)="notify()">Notify</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.notifyService.create(\'Notify message\', \'Notify title\').subscribe(() => alert(\'closed\'));\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Keep open"\r\n                   [values]="{ notifyService: notifyService, notify: notifyOpen }">\r\n  <![CDATA[\r\n  <button m4-button (click)="notify()">Notify</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.notifyService.create(\'Notify message\', \'Notify title\', { keepOpen: true });\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Customize"\r\n                   [values]="{ notifyService: notifyService, notify: notifyCustom }">\r\n  <![CDATA[\r\n  <button m4-button (click)="notify()">Notify</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.notifyService.create(\'Notify message\', \'Notify title\', { keepOpen: true, cls: \'success\', width: \'400px\' });\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Setup" description="You can setup the notify system on startup for all notfications"\r\n                   [values]="{ notifyService: notifyService, notify: notifySetup }">\r\n  <![CDATA[\r\n  <button m4-button (click)="notify()">Notify</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.notifyService.setup({\\n\r\n      \\tduration: 2000,\\n\r\n      \\tanimation: \'easeInBounce\',\\n\r\n      \\tdistance: \'50px\',\\n\r\n      \\ttimeout: 700,\\n\r\n      \\twidth: \'400px\'\\n\r\n    });\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n'},aq7P:function(t,n){t.exports=""},"ex+n":function(t,n){t.exports='<h1>Dialog service</h1>\r\n<a href="https://metroui.org.ua/dialog.html" target="_blank">Dialog in Metro 4 docs</a>\r\n\r\n<div class="remark info">\r\n  The <code>DialogService</code> provides methods to simply create common dialogs like alerts, prompts etc.\r\n</div>\r\n\r\n<app-doc-component header="Basic usage" [values]="{ dialogService: dialogService, alert: alert, confirm: confirm, prompt: prompt, info: info }">\r\n  <![CDATA[\r\n  <button m4-button (click)="alert()">Alert</button>\\n\r\n  <button m4-button (click)="confirm()">Confirm</button>\\n\r\n  <button m4-button (click)="prompt()">Prompt</button>\\n\r\n  <button m4-button (click)="info()">Info</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    @Component({\\n\r\n      \\tselector: \'app-dialog-service\',\\n\r\n      \\ttemplateUrl: \'./dialog-service.component.html\',\\n\r\n      \\tstyleUrls: [\'./dialog-service.component.less\']\\n\r\n    })\\n\r\n    export class DialogServiceComponent {\\n\\n\r\n\r\n      \\tconstructor(private dialogService: DialogService) { }\\n\\n\r\n\r\n      \\talert() {\\n\r\n        \\t\\tthis.dialogService.alert(\'Basic alert\', \'Warning!\');\\n\r\n      \\t}\\n\\n\r\n\r\n      \\tconfirm() {\\n\r\n        \\t\\tthis.dialogService.confirm(\'Basic confirm\', \'Are you sure?\');\\n\r\n      \\t}\\n\\n\r\n\r\n      \\tprompt() {\\n\r\n        \\t\\tthis.dialogService.prompt(\'Basic prompt\', \'Enter value\');\\n\r\n      \\t}\\n\\n\r\n\r\n      \\tinfo() {\\n\r\n        \\t\\tthis.dialogService.info(\'Basic info\');\\n\r\n      \\t}\\n\r\n    }\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Wait for result" description="All dialog methods return observables that you can use to wait for the result of the dialog"\r\n                   [values]="{ dialogService: dialogService, confirm: confirmWait, prompt: promptWait }">\r\n  <![CDATA[\r\n  <button m4-button (click)="confirm()">Confirm</button>\\n\r\n  <button m4-button (click)="prompt()">Prompt</button>\\n\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.dialogService.confirm(\'Confirm wait\', \'Are you sure?\').subscribe((result) => alert(result));\\n\r\n    this.dialogService.prompt(\'Prompt wait\', \'Input\').subscribe((result) => alert(result));\\n\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Form prompt" description="You can create a complex form prompt using the M4FormGroup"\r\n                   [values]="{ dialogService: dialogService, prompt: promptForm }">\r\n  <![CDATA[\r\n  <button m4-button (click)="prompt()">Prompt</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    const formGroup = new M4FormGroup(\'prompt\', {\\n\r\n      \\tname: new M4FormControl(FileInputComponent, null, [Validators.required], null, { read: \'text\' })\\n\r\n    }, null, null);\\n\\n\r\n\r\n    this.dialogService.formPrompt(\'Form prompt\', formGroup)\\n\r\n      \\t.subscribe((result) => alert(JSON.stringify(result)));\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<div class="remark success">\r\n  You can use a custom complex form group as a value for the form group.\r\n  Check out <a routerLink="/form/form_builder"><code>m4-form-builder</code></a> for more information.\r\n</div>\r\n\r\n<app-doc-component header="Close" [values]="{ dialogService: dialogService, alert: alertClose }">\r\n  <![CDATA[\r\n  <button m4-button (click)="alert()">Alert</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.dialogService.alert(\'Alert close\', \'Content\').pipe(takeUntil(timer(2000))).subscribe();\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n'},fLDI:function(t,n){t.exports=""},pnAw:function(t,n){t.exports=""},"qq+C":function(t,n){t.exports=""}}]);