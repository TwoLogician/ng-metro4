function _possibleConstructorReturn(t,n){return!n||"object"!=typeof n&&"function"!=typeof n?_assertThisInitialized(t):n}function _assertThisInitialized(t){if(void 0===t)throw new ReferenceError("this hasn't been initialised - super() hasn't been called");return t}function _getPrototypeOf(t){return(_getPrototypeOf=Object.setPrototypeOf?Object.getPrototypeOf:function(t){return t.__proto__||Object.getPrototypeOf(t)})(t)}function _inherits(t,n){if("function"!=typeof n&&null!==n)throw new TypeError("Super expression must either be null or a function");t.prototype=Object.create(n&&n.prototype,{constructor:{value:t,writable:!0,configurable:!0}}),n&&_setPrototypeOf(t,n)}function _setPrototypeOf(t,n){return(_setPrototypeOf=Object.setPrototypeOf||function(t,n){return t.__proto__=n,t})(t,n)}function _classCallCheck(t,n){if(!(t instanceof n))throw new TypeError("Cannot call a class as a function")}function _defineProperties(t,n){for(var e=0;e<n.length;e++){var o=n[e];o.enumerable=o.enumerable||!1,o.configurable=!0,"value"in o&&(o.writable=!0),Object.defineProperty(t,o.key,o)}}function _createClass(t,n,e){return n&&_defineProperties(t.prototype,n),e&&_defineProperties(t,e),t}(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{"+nGP":function(t,n,e){"use strict";e.r(n),n.default='<h1>Dialog</h1>\r\n<a href="https://metroui.org.ua/dialog.html" target="_blank">Dialog in Metro 4 docs</a>\r\n\r\n<app-doc-component header="Basic usage">\r\n  <![CDATA[\r\n  <m4-dialog #dialog>\\l\r\n    \\t<div dialog-title>dialog title</div>\\l\r\n    \\t<div dialog-content>dialog content</div>\\l\r\n  </m4-dialog>\\n\r\n  <button m4-button (click)="dialog.open()">Open</button>\r\n  ]]>\r\n</app-doc-component>\r\n\r\n<div class="remark primary">\r\n  The dialog element has three content sections:<br>\r\n  <ol>\r\n    <li>\r\n      <b>Title:</b><br>\r\n      <code>&lt;div dialog-title&gt;&lt;/div&gt;</code><br>\r\n      Contains the title of the dialog\r\n    </li>\r\n    <li>\r\n      <b>Content:</b><br>\r\n      <code>&lt;div dialog-content&gt;&lt;/div&gt;</code><br>\r\n      Contains the content of the dialog\r\n    </li>\r\n    <li>\r\n      <b>Actions:</b><br>\r\n      <code>&lt;div dialog-actions&gt;&lt;/div&gt;</code><br>\r\n      Contains custom actions of the dialog. (If not given the dialog has a default Ok-button in this section)\r\n    </li>\r\n  </ol>\r\n</div>\r\n\r\n<app-doc-component header="Control open-state">\r\n  <![CDATA[\r\n  <m4-dialog [open]="isOpen" (close-event)="isOpen = false">\\l\r\n    \\t<div dialog-title>dialog title</div>\\l\r\n    \\t<div dialog-content>dialog content</div>\\l\r\n    \\t<div dialog-actions>no actions</div>\\l\r\n  </m4-dialog>\\n\r\n  <m4-checkbox caption="Dialog open" [(ngModel)]="isOpen"></m4-checkbox>\r\n  ]]>\r\n</app-doc-component>\r\n\r\n\r\n<app-doc-component header="Width">\r\n  <![CDATA[\r\n  <m4-dialog #dialog width="50%">\\l\r\n    \\t<div dialog-title>dialog title</div>\\l\r\n    \\t<div dialog-content>dialog content</div>\\l\r\n  </m4-dialog>\\n\r\n  <button m4-button (click)="dialog.open()">Open (static width)</button>\\n\\n\r\n  <m4-dialog #dialog2 class="w-75 w-25-md">\\l\r\n    \\t<div dialog-title>dialog title</div>\\l\r\n    \\t<div dialog-content>dialog content</div>\\l\r\n  </m4-dialog>\\n\r\n  <button m4-button (click)="dialog2.open()">Open (set with css)</button>\r\n  ]]>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Style">\r\n  <![CDATA[\r\n  <m4-dialog #dialog [class]="style">\\l\r\n    \\t<div dialog-title>dialog title</div>\\l\r\n    \\t<div dialog-content>dialog content</div>\\l\r\n  </m4-dialog>\\n\r\n  <button m4-button (click)="dialog.open()">Open</button>\\n\r\n\r\n  \\i\r\n  <m4-select class="mt-5" [(ngModel)]="style" [options]="accentDictionary" prepend="Style"></m4-select>\\n\r\n  ]]>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Overlay">\r\n  <![CDATA[\r\n  <m4-dialog #dialog [overlay]="true" overlay-color="#ff0000" [overlay-alpha]="0.1">\\l\r\n    \\t<div dialog-title>dialog title</div>\\l\r\n    \\t<div dialog-content>dialog content</div>\\l\r\n  </m4-dialog>\\n\r\n  <button m4-button (click)="dialog.open()">Open</button>\r\n  ]]>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Access from code">\r\n  <![CDATA[\r\n  <m4-dialog #dialog>\\l\r\n    \\t<div dialog-title>dialog title</div>\\l\r\n    \\t<div dialog-content>dialog content</div>\\l\r\n  </m4-dialog>\\n\r\n  <button m4-button (click)="dialog.open()">Open</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    @ViewChild(\'dialog\', { static: true }) dialog: metro4.DialogComponent;\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n'},"3waB":function(t,n,e){"use strict";e.r(n);var o=e("fXoL"),r=e("ofXK"),i=e("tyNb"),a=function(t){return t&&t.__esModule?t:{default:t}},c=function(){function t(){_classCallCheck(this,t)}return _createClass(t,[{key:"ngOnInit",value:function(){}}]),t}();c=function(t,n,e,o){var r,i=arguments.length,a=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,e):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,n,e,o);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(a=(i<3?r(a):i>3?r(n,e,a):r(n,e))||a);return i>3&&a&&Object.defineProperty(n,e,a),a}([Object(o.n)({selector:"app-hint",template:a(e("4qup")).default,styles:[a(e("fLDI")).default]}),function(t,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,n)}("design:paramtypes",[])],c);var l=e("2460"),s=function(t){return t&&t.__esModule?t:{default:t}},u=function(){function t(n){_classCallCheck(this,t),this.toastService=n}return _createClass(t,[{key:"toast",value:function(){this.toastService.create("This is a toast")}},{key:"toastWait",value:function(){this.toastService.create("This is a toast").subscribe((function(){return alert("closed")}))}},{key:"toastCustom",value:function(){this.toastService.create("This is a toast",{additional:{distance:0,showTop:!0},cls:"alert",timeout:2e4})}}]),t}();u.ctorParameters=function(){return[{type:l.l}]},u=function(t,n,e,o){var r,i=arguments.length,a=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,e):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,n,e,o);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(a=(i<3?r(a):i>3?r(n,e,a):r(n,e))||a);return i>3&&a&&Object.defineProperty(n,e,a),a}([Object(o.n)({selector:"app-toast",template:s(e("A6tV")).default,styles:[s(e("pnAw")).default]}),function(t,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,n)}("design:paramtypes",[l.l])],u);var p=function(t){return t&&t.__esModule?t:{default:t}},f=function(){function t(n){_classCallCheck(this,t),this.notifyService=n,this.message="",this.title=""}return _createClass(t,[{key:"ngOnInit",value:function(){}},{key:"notify",value:function(){this.notifyService.create("Notify message"),this.notifyService.create("Notify message","Notify title")}},{key:"notifyWait",value:function(){this.notifyService.create("Notify message","Notify title",{keepOpen:!0}).subscribe((function(){return alert("closed")}))}},{key:"notifyOpen",value:function(){this.notifyService.create("Notify message","Notify title",{keepOpen:!0})}},{key:"notifyCustom",value:function(){this.notifyService.create("Notify message","Notify title",{keepOpen:!0,cls:"success",width:"400px"})}},{key:"notifySetup",value:function(){this.notifyService.setup({duration:2e3,animation:"easeInBounce",distance:"50px",timeout:700,width:"400px"}),this.notifyService.create("Notify message","Notify title"),this.notifyService.reset()}}]),t}();f.ctorParameters=function(){return[{type:l.k}]},f=function(t,n,e,o){var r,i=arguments.length,a=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,e):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,n,e,o);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(a=(i<3?r(a):i>3?r(n,e,a):r(n,e))||a);return i>3&&a&&Object.defineProperty(n,e,a),a}([Object(o.n)({selector:"app-notify",template:p(e("Cpn7")).default,styles:[p(e("6Ui9")).default]}),function(t,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,n)}("design:paramtypes",[l.k])],f);var d=function(t,n,e,o){var r,i=arguments.length,a=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,e):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,n,e,o);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(a=(i<3?r(a):i>3?r(n,e,a):r(n,e))||a);return i>3&&a&&Object.defineProperty(n,e,a),a},m=function(t,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,n)},g=function(t){return t&&t.__esModule?t:{default:t}},h=function(){function t(n){_classCallCheck(this,t),this.dialogService=n,this.dialogOpen=!1,this.overlay=!0,this.primary=!0,this.width=900}return _createClass(t,[{key:"ngOnInit",value:function(){}},{key:"showDialog",value:function(){var t=this;this.dialog.open().subscribe(console.log),setTimeout((function(){t.dialog.close()}),5e3)}}]),t}();h.ctorParameters=function(){return[{type:l.c}]},d([Object(o.lb)("dialog",{static:!0}),m("design:type",l.b)],h.prototype,"dialog",void 0),h=d([Object(o.n)({selector:"app-dialog",template:g(e("+nGP")).default,styles:[g(e("qq+C")).default]}),m("design:paramtypes",[l.c])],h);var v=e("NJ9Y"),y=e("l7GE"),b=e("ZUHj"),C=function(){function t(n){_classCallCheck(this,t),this.notifier=n}return _createClass(t,[{key:"call",value:function(t,n){var e=new k(t),o=Object(b.a)(e,this.notifier);return o&&!e.seenValue?(e.add(o),n.subscribe(e)):e}}]),t}(),k=function(t){function n(t){var e;return _classCallCheck(this,n),(e=_possibleConstructorReturn(this,_getPrototypeOf(n).call(this,t))).seenValue=!1,e}return _inherits(n,t),_createClass(n,[{key:"notifyNext",value:function(t,n,e,o,r){this.seenValue=!0,this.complete()}},{key:"notifyComplete",value:function(){}}]),n}(y.a),A=e("PqYM"),S=e("3Pt+"),O=function(t){return t&&t.__esModule?t:{default:t}},D=function(){function t(){_classCallCheck(this,t),this.dialogDataEmitter=new o.x}return _createClass(t,[{key:"ngOnInit",value:function(){this.model=this.dialogDataInput}}]),t}();D=function(t,n,e,o){var r,i=arguments.length,a=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,e):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,n,e,o);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(a=(i<3?r(a):i>3?r(n,e,a):r(n,e))||a);return i>3&&a&&Object.defineProperty(n,e,a),a}([Object(o.n)({selector:"app-custom-dialog-content-example",template:O(e("Xy8A")).default,styles:[O(e("FGD3")).default]}),function(t,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,n)}("design:paramtypes",[])],D);var w=function(t){return t&&t.__esModule?t:{default:t}},T=function(){function t(n){_classCallCheck(this,t),this.dialogService=n,this.subscriptions=[]}return _createClass(t,[{key:"alert",value:function(){this.dialogService.alert("Basic alert","Warning!")}},{key:"confirm",value:function(){this.dialogService.confirm("Basic confirm","Are you sure?")}},{key:"prompt",value:function(){this.dialogService.prompt("Basic prompt","Enter value")}},{key:"info",value:function(){this.dialogService.info("Basic info")}},{key:"ngOnInit",value:function(){}},{key:"confirmWait",value:function(){this.dialogService.confirm("Confirm wait","Are you sure?").subscribe((function(t){return alert(t)}))}},{key:"promptWait",value:function(){this.dialogService.prompt("Prompt wait","Input").subscribe((function(t){return alert(t)}))}},{key:"customDialog",value:function(){this.subscriptions.push(this.dialogService.show(D,"seeded with data","Custom dialog","Close","w-vw-75 alert").pipe(Object(v.a)()).subscribe((function(t){return alert(t)})))}},{key:"promptForm",value:function(){var t=new l.i("prompt",{name:new l.h(l.e,null,[S.l.required],null,{read:"text"})},null,null);this.dialogService.formPrompt("Form prompt",t).subscribe((function(t){return alert(JSON.stringify(t))}))}},{key:"alertClose",value:function(){var t;this.dialogService.alert("Alert close","Content").pipe((t=Object(A.a)(2e3),function(n){return n.lift(new C(t))})).subscribe()}},{key:"ngOnDestroy",value:function(){this.subscriptions.forEach((function(t){return t.unsubscribe()})),this.subscriptions=[]}}]),t}();T.ctorParameters=function(){return[{type:l.c}]};var _=[{path:"hint",component:c},{path:"toast",component:u},{path:"notify",component:f},{path:"dialog",component:h},{path:"dialog-service",component:T=function(t,n,e,o){var r,i=arguments.length,a=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,e):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,n,e,o);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(a=(i<3?r(a):i>3?r(n,e,a):r(n,e))||a);return i>3&&a&&Object.defineProperty(n,e,a),a}([Object(o.n)({selector:"app-dialog-service",template:w(e("j7l9")).default,styles:[w(e("aq7P")).default]}),function(t,n){if("object"==typeof Reflect&&"function"==typeof Reflect.metadata)return Reflect.metadata(t,n)}("design:paramtypes",[l.c])],T)}],j=function t(){_classCallCheck(this,t)};j=function(t,n,e,o){var r,i=arguments.length,a=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,e):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,n,e,o);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(a=(i<3?r(a):i>3?r(n,e,a):r(n,e))||a);return i>3&&a&&Object.defineProperty(n,e,a),a}([Object(o.L)({imports:[i.f.forChild(_)],exports:[i.f]})],j);var P=e("PCNd");e.d(n,"InformationModule",(function(){return R}));var R=function t(){_classCallCheck(this,t)};R=function(t,n,e,o){var r,i=arguments.length,a=i<3?n:null===o?o=Object.getOwnPropertyDescriptor(n,e):o;if("object"==typeof Reflect&&"function"==typeof Reflect.decorate)a=Reflect.decorate(t,n,e,o);else for(var c=t.length-1;c>=0;c--)(r=t[c])&&(a=(i<3?r(a):i>3?r(n,e,a):r(n,e))||a);return i>3&&a&&Object.defineProperty(n,e,a),a}([Object(o.L)({declarations:[c,u,f,h,T,D],imports:[r.b,P.a,j]})],R)},"4qup":function(t,n,e){"use strict";e.r(n),n.default='<h1>Hint</h1>\r\n<a href="https://metroui.org.ua/hints.html" target="_blank">Hint in Metro 4 docs</a>\r\n\r\n<app-doc-component header="Basic usage">\r\n  <![CDATA[\r\n  <button m4-button m4-hint="Hint content">Button with hint</button>\r\n  ]]>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Position">\r\n  <![CDATA[\r\n  <button m4-button m4-hint="Left" hint-position="left">Hint left</button>\\n\r\n  <button m4-button m4-hint="Top" hint-position="top">Hint top</button>\\n\r\n  <button m4-button m4-hint="Bottom" hint-position="bottom">Hint bottom</button>\\n\r\n  <button m4-button m4-hint="Right" hint-position="right">Hint right</button>\r\n  ]]>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Customize">\r\n  <![CDATA[\r\n  <button m4-button m4-hint="Content" hint-offset="0">Custom offset</button>\\n\r\n  <button m4-button m4-hint="Content" hint-hide="1000">Hide after timeout</button>\r\n  ]]>\r\n</app-doc-component>\r\n'},"6Ui9":function(t,n,e){"use strict";e.r(n),n.default=""},A6tV:function(t,n,e){"use strict";e.r(n),n.default='<h1>Toast service</h1>\r\n<a href="https://metroui.org.ua/toast.html" target="_blank">Toast in Metro 4 docs</a>\r\n\r\n<div class="remark info">\r\n  The <code>ToastService</code> provides methods to simply create toast-notifications in your application.\r\n</div>\r\n\r\n<app-doc-component header="Basic usage" [values]="{ toastService: toastService, toast: toast }">\r\n  <![CDATA[\r\n  <button m4-button (click)="toast()">Create toast</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    @Component({\\n\r\n      \\tselector: \'app-toast\',\\n\r\n      \\ttemplateUrl: \'./toast.component.html\',\\n\r\n      \\tstyleUrls: [\'./toast.component.less\']\\n\r\n    })\\n\r\n    export class ToastComponent {\\n\r\n      \\tconstructor(private toastService: ToastService) { }\\n\\n\r\n\r\n      \\ttoast() {\\n\r\n        \\t\\tthis.toastService.create(\'This is a toast\');\\n\r\n      \\t}\\n\r\n    }\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Wait for result" description="The create method returns an observables that you can use to wait for the toast to be closed/clicked"\r\n                   [values]="{ toastService: toastService, toast: toastWait }">\r\n  <![CDATA[\r\n  <button m4-button (click)="toast()">Create toast</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.toastService.create(\'This is a toast\').subscribe(() => alert(\'closed\'));\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Customize"\r\n                   [values]="{ toastService: toastService, toast: toastCustom }">\r\n  <![CDATA[\r\n  <button m4-button (click)="toast()">Create toast</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.toastService.create(\'This is a toast\', { additional: { distance: 0, showTop: true }, cls: \'alert\', timeout: 1000 });\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n'},Cpn7:function(t,n,e){"use strict";e.r(n),n.default='<h1>Notify service</h1>\r\n<a href="https://metroui.org.ua/notify.html" target="_blank">Notify in Metro 4 docs</a>\r\n\r\n<div class="remark info">\r\n  The <code>NotifyService</code> provides methods to simply create notifications in your application.\r\n</div>\r\n\r\n<app-doc-component header="Basic usage" [values]="{ notifyService: notifyService, notify: notify }">\r\n  <![CDATA[\r\n  <button m4-button (click)="notify()">Notify</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    @Component({\\n\r\n      \\tselector: \'app-notify\',\\n\r\n      \\ttemplateUrl: \'./notify.component.html\',\\n\r\n      \\tstyleUrls: [\'./notify.component.less\']\\n\r\n    })\\n\r\n    export class NotifyComponent {\\n\\n\r\n\r\n      \\tconstructor(public notifyService: NotifyService) { }\\n\\n\r\n\r\n      \\tnotify() {\\n\r\n        \\t\\tthis.notifyService.create(\'Notify message\');\\n\r\n        \\t\\tthis.notifyService.create(\'Notify message\', \'Notify title\');\\n\r\n      \\t}\\n\r\n    }\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Wait for result" description="The create method returns an observables that you can use to wait for the notification to be closed/clicked"\r\n                   [values]="{ notifyService: notifyService, notify: notifyWait }">\r\n  <![CDATA[\r\n  <button m4-button (click)="notify()">Notify</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.notifyService.create(\'Notify message\', \'Notify title\').subscribe(() => alert(\'closed\'));\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Keep open"\r\n                   [values]="{ notifyService: notifyService, notify: notifyOpen }">\r\n  <![CDATA[\r\n  <button m4-button (click)="notify()">Notify</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.notifyService.create(\'Notify message\', \'Notify title\', { keepOpen: true });\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Customize"\r\n                   [values]="{ notifyService: notifyService, notify: notifyCustom }">\r\n  <![CDATA[\r\n  <button m4-button (click)="notify()">Notify</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.notifyService.create(\'Notify message\', \'Notify title\', { keepOpen: true, cls: \'success\', width: \'400px\' });\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Setup" description="You can setup the notify system on startup for all notfications"\r\n                   [values]="{ notifyService: notifyService, notify: notifySetup }">\r\n  <![CDATA[\r\n  <button m4-button (click)="notify()">Notify</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.notifyService.setup({\\n\r\n      \\tduration: 2000,\\n\r\n      \\tanimation: \'easeInBounce\',\\n\r\n      \\tdistance: \'50px\',\\n\r\n      \\ttimeout: 700,\\n\r\n      \\twidth: \'400px\'\\n\r\n    });\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n'},FGD3:function(t,n,e){"use strict";e.r(n),n.default=""},Xy8A:function(t,n,e){"use strict";e.r(n),n.default='<h3>This is an example for a custom component that is rendered in a dialog</h3>\n\n<m4-input prepend="Custom input" [(ngModel)]="model" (ngModelChange)="dialogDataEmitter.emit($event)"></m4-input>\n\n{{ model | json }}\n'},aq7P:function(t,n,e){"use strict";e.r(n),n.default=""},fLDI:function(t,n,e){"use strict";e.r(n),n.default=""},j7l9:function(t,n,e){"use strict";e.r(n),n.default='<h1>Dialog service</h1>\r\n<a href="https://metroui.org.ua/dialog.html" target="_blank">Dialog in Metro 4 docs</a>\r\n\r\n<div class="remark info">\r\n  The <code>DialogService</code> provides methods to simply create common dialogs like alerts, prompts etc.\r\n</div>\r\n\r\n<app-doc-component header="Basic usage" [values]="{ dialogService: dialogService, alert: alert, confirm: confirm, prompt: prompt, info: info }">\r\n  <![CDATA[\r\n  <button m4-button (click)="alert()">Alert</button>\\n\r\n  <button m4-button (click)="confirm()">Confirm</button>\\n\r\n  <button m4-button (click)="prompt()">Prompt</button>\\n\r\n  <button m4-button (click)="info()">Info</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    @Component({\\n\r\n      \\tselector: \'app-dialog-service\',\\n\r\n      \\ttemplateUrl: \'./dialog-service.component.html\',\\n\r\n      \\tstyleUrls: [\'./dialog-service.component.less\']\\n\r\n    })\\n\r\n    export class DialogServiceComponent {\\n\\n\r\n\r\n      \\tconstructor(private dialogService: DialogService) { }\\n\\n\r\n\r\n      \\talert() {\\n\r\n        \\t\\tthis.dialogService.alert(\'Basic alert\', \'Warning!\');\\n\r\n      \\t}\\n\\n\r\n\r\n      \\tconfirm() {\\n\r\n        \\t\\tthis.dialogService.confirm(\'Basic confirm\', \'Are you sure?\');\\n\r\n      \\t}\\n\\n\r\n\r\n      \\tprompt() {\\n\r\n        \\t\\tthis.dialogService.prompt(\'Basic prompt\', \'Enter value\');\\n\r\n      \\t}\\n\\n\r\n\r\n      \\tinfo() {\\n\r\n        \\t\\tthis.dialogService.info(\'Basic info\');\\n\r\n      \\t}\\n\r\n    }\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Wait for result" description="All dialog methods return observables that you can use to wait for the result of the dialog"\r\n                   [values]="{ dialogService: dialogService, confirm: confirmWait, prompt: promptWait }">\r\n  <![CDATA[\r\n  <button m4-button (click)="confirm()">Confirm</button>\\n\r\n  <button m4-button (click)="prompt()">Prompt</button>\\n\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.dialogService.confirm(\'Confirm wait\', \'Are you sure?\').subscribe((result) => alert(result));\\n\r\n    this.dialogService.prompt(\'Prompt wait\', \'Input\').subscribe((result) => alert(result));\\n\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Render component in a dialog" description="You can render any component in a dialog"\r\n                   [values]="{ dialogService: dialogService, customDialog: customDialog, subscriptions: subscriptions }">\r\n  <![CDATA[\r\n  <button m4-button (click)="customDialog()">Show custom dialog</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.dialogService.show(CustomDialogContentExampleComponent, \'seeded with data\', \'Custom dialog\', \'Close\', \'w-vw-75 alert\')\\n\r\n      \\t.pipe(last())\\n\r\n      \\t.subscribe((data) => alert(data));\r\n\r\n    \\f:(ts)\r\n    // Don\'t forget to add this component to entryComponents if using Angular Version <9\\n\r\n    @Component({\\n\r\n      \\tselector: \'app-custom-dialog-content-example\',\\n\r\n      \\ttemplate: \'<h3>This is an example for a custom component that is rendered in a dialog</h3>\\n\r\n        \\t\\t<m4-input prepend="Custom input" [(ngModel)]="model" (ngModelChange)="dialogDataEmitter.emit($event)"></m4-input>\',\\n\r\n      \\tstyleUrls: [\'./custom-dialog-content-example.component.less\']\\n\r\n    })\\n\r\n    export class CustomDialogContentExampleComponent implements OnInit, M4DialogDataEmitter<string>, M4DialogDataInput<string> {\\n\\n\r\n\r\n      \\tconstructor() { }\\n\\n\r\n\r\n      \\tmodel: string;\\n\\n\r\n\r\n      \\tdialogDataEmitter = new EventEmitter<string>();\\n\r\n      \\tdialogDataInput: string;\\n\\n\r\n\r\n      \\tngOnInit() {\\n\r\n        \\t\\tthis.model = this.dialogDataInput;\\n\r\n      \\t}\\n\r\n    }\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<app-doc-component header="Form prompt" description="You can create a complex form prompt using the M4FormGroup"\r\n                   [values]="{ dialogService: dialogService, prompt: promptForm }">\r\n  <![CDATA[\r\n  <button m4-button (click)="prompt()">Prompt</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    const formGroup = new M4FormGroup(\'prompt\', {\\n\r\n      \\tname: new M4FormControl(FileInputComponent, null, [Validators.required], null, { read: \'text\' })\\n\r\n    }, null, null);\\n\\n\r\n\r\n    this.dialogService.formPrompt(\'Form prompt\', formGroup)\\n\r\n      \\t.subscribe((result) => alert(JSON.stringify(result)));\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n\r\n<div class="remark success">\r\n  You can use a custom complex form group as a value for the form group.\r\n  Check out <a routerLink="/form/form_builder"><code>m4-form-builder</code></a> for more information.\r\n</div>\r\n\r\n<app-doc-component header="Close" [values]="{ dialogService: dialogService, alert: alertClose }">\r\n  <![CDATA[\r\n  <button m4-button (click)="alert()">Alert</button>\r\n  ]]>\r\n  <div lang>\r\n    <![CDATA[\r\n    \\f:(ts)\r\n    this.dialogService.alert(\'Alert close\', \'Content\').pipe(takeUntil(timer(2000))).subscribe();\r\n    ]]>\r\n  </div>\r\n</app-doc-component>\r\n'},pnAw:function(t,n,e){"use strict";e.r(n),n.default=""},"qq+C":function(t,n,e){"use strict";e.r(n),n.default=""}}]);